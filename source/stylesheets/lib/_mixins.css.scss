@mixin float($float:left, $pos:relative) {
  float:    $float;
  position: $pos;}

@mixin font-smoothing( $webkit: antialiased, $moz: grayscale) {
  -webkit-font-smoothing:   $webkit;
  -moz-osx-font-smoothing:  $moz; }

@mixin transform($properties) {
  -webkit-transform:  $properties; /* Safari and Chrome */
  -moz-transform:     $properties; /* Firefox */
  -ms-transform:      $properties; /* IE 9 */
  -o-transform:       $properties;
  transform:          $properties; }

@mixin transitions($properties){
  -webkit-transition: $properties;  /* Saf3.2+, Chrome */
  -moz-transition:    $properties;  /* FF4+ */
  -ms-transition:     $properties;  /* IE10 */
  -o-transition:      $properties;  /* Opera 10.5+ */
  transition:         $properties; }

// Mixin for rounded
@mixin rounded($radius: 10px, $moz:true, $webkit: true, $ms:true, $sledge-hammer:false){
  @if $sledge-hammer {
    @if $moz      {-moz-border-radius:    #{$radius} !important;}
    @if $webkit   {-webkit-border-radius: #{$radius} !important;}
    @if $ms       {-ms-border-radius:     #{$radius} !important;}
    border-radius: #{$radius} !important; }
  @else {
    @if $moz      {-moz-border-radius:    $radius;}
    @if $webkit   {-webkit-border-radius: $radius;}
    @if $ms       {-ms-border-radius:     $radius;}
    border-radius: $radius; } }

// Color pairs for standard colors.
$colors: "charcoal" $charcoal, "white" $white, "light-blue" $light-blue, "med-blue" $med-blue, "dark-blue" $dark-blue, "bone" $bone, "khaki" $khaki, "tan" $tan;
@each $color in $colors {
  $key:   nth(unquote($color), 1);
  $value: nth($color, 2);
  .#{$key} {
    color:  $value;
    fill:   $value;
    &-bg {
      background-color: $value; } } }

// Button overrides
@mixin btn-mixin($primary: $light-gray, $text: $white, $secondary: $charcoal ) {
  @include box-shadow(0 0 5px rgba(darken($primary, 10), .5) inset);
  @include rounded(4px);
  @include transition(all 350ms);
  background:   $primary;
  border:{
    top:        none;
    right:      none;
    bottom:     4px solid darken($primary, 10);
    left:       none; }
  color:        $text;
  &:hover {
    @include transition(all 350ms);
    @include box-shadow(0 0 5px rgba(darken($secondary, 10), .5) inset);
    background: $secondary;
    border-bottom:     4px solid darken($secondary, 10);
    color:      $text; } }

.btn {
  &.btn-charcoal {
    $primary:     $charcoal;
    @include btn-mixin($primary); }
  &.btn-red-orange {
    $primary:     $red-orange;
    @include btn-mixin($primary);}

  &.btn-med-blue {
    $primary:     $med-blue;
    @include btn-mixin($primary); }

  &.btn-dark-blue {
    $primary:     $dark-blue;
    @include btn-mixin($primary); }

  &.btn-lt-blue {
    $primary:     lighten($med-blue, 10);
    @include btn-mixin($primary); }
}


@mixin radial-gradient($from, $to) {
    background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
    background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: radial-gradient(center, circle cover, $from 0%, $to 100%);
    background-color: $from;
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr="#{$from}", endColorstr="$to",GradientType=1 );
}

@mixin gapmaker($sizes: (5 10 15 25), $sides: (top bottom), $type: "margin", $class: "" ) {
  @if $type == nil {
    @each $sz in $sizes {
      @each $sd in $sides {
      &.move-#{$sides}#{$sz} {
        #{$sd}: #{$sz}px; } } }
  }@else {
    @each $sz in $sizes {
      @each $sd in $sides {
      &.#{$type}-#{$class}gap#{$sz} {
        #{$type}:{
          #{$sd}: #{$sz}px; } } } } } }

@mixin border-radius($radius: 10px, $moz:true, $webkit: true, $ms:true, $pie:true){
  @if $moz      {-moz-border-radius:    $radius;}
  @if $webkit   {-webkit-border-radius: $radius;}
  @if $ms       {-ms-border-radius:     $radius;}
  border-radius: $radius; }

$margin-vars: ( 0 3 5 10 15 20 25 30 35 40);
*[class*="margin-gap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (top right bottom left) ); }

*[class*="margin-topgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (top), $class: top, $type: margin ); }

*[class*="margin-bottomgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (bottom), $class: bottom, $type: margin ); }

*[class*="margin-leftgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (left), $class: left, $type: margin ); }

*[class*="margin-rightgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (right), $class: right, $type: margin ); }

*[class*="margin-sidegap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (right left), $class: (side) ); }

$padding-vars:( 0 5 10 15 20 25 30 35 40 );
*[class*="padding-gap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (top right bottom left), $type: padding );
  @include clearfix; }

*[class*="padding-sidegap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (right left), $class: side, $type: padding );
  @include clearfix; }

*[class*="padding-topgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (top), $class: top, $type: padding );
  @include clearfix; }

*[class*="padding-bottomgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (bottom), $class: bottom, $type: padding );
  @include clearfix; }

*[class*="padding-leftgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (left), $class: left, $type: padding );
  @include clearfix; }

*[class*="padding-rightgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (right), $class: right, $type: padding );
  @include clearfix; }