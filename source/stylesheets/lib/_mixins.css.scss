/// Mixin helper to output vendor prefixes
/// @access public
/// @author HugoGiraudel
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes - List of prefixes to output
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value; }
  #{$property}: $value;
}

@mixin font-smoothing( $webkit: antialiased, $moz: grayscale) {
  -webkit-font-smoothing:   $webkit;
  -moz-osx-font-smoothing:  $moz; }

@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

// Easy float class
@mixin float($float:left, $pos:relative) {
  float:    $float;
  position: $pos; }

  // For clearing floats properly
@mixin clearfix{
  *zoom: 1;
  &:before, &:after{
    content: "";
    display: table; }
  &:after{
    clear:both; } }

// create clearfix class
.clearfix {
  @include clearfix; }

/// Responsive manager.
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
  @else {
    @warn "Couldn't find a breakpoint named `#{$name}`.";
  }
}
@mixin radial-gradient($from, $to) {
    background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
    background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: radial-gradient(center, circle cover, $from 0%, $to 100%);
    background-color: $from;
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr="#{$from}", endColorstr="$to",GradientType=1 ); }

@mixin gapmaker($sizes: (5 10 15 25), $sides: (top bottom), $type: "margin", $class: "" ) {
  @if $type == nil {
    @each $sz in $sizes {
      @each $sd in $sides {
      &.move-#{$sides}#{$sz} {
        #{$sd}: #{$sz}px; } } }
  }@else {
    @each $sz in $sizes {
      @each $sd in $sides {
      &.#{$type}-#{$class}gap#{$sz} {
        #{$type}:{
          #{$sd}: #{$sz}px; } } } } } }

$margin-vars: ( 0 3 5 10 15 20 25 30 35 40);
*[class*="margin-gap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (top right bottom left) ); }

*[class*="margin-topgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (top), $class: top, $type: margin ); }

*[class*="margin-bottomgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (bottom), $class: bottom, $type: margin ); }

*[class*="margin-leftgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (left), $class: left, $type: margin ); }

*[class*="margin-rightgap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (right), $class: right, $type: margin ); }

*[class*="margin-sidegap"] {
  @include gapmaker( $sizes:( $margin-vars ), $sides: (right left), $class: (side) ); }

$padding-vars:( 0 5 10 11 15 20 25 30 35 40 50 60 );
*[class*="padding-gap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (top right bottom left), $type: padding );
  @include clearfix; }

*[class*="padding-sidegap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (right left), $class: side, $type: padding );
  @include clearfix; }

*[class*="padding-topgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (top), $class: top, $type: padding );
  @include clearfix; }

*[class*="padding-bottomgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (bottom), $class: bottom, $type: padding );
  @include clearfix; }

*[class*="padding-leftgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (left), $class: left, $type: padding );
  @include clearfix; }

*[class*="padding-rightgap"] {
  @include gapmaker( $sizes:( $padding-vars ), $sides: (right), $class: right, $type: padding );
  @include clearfix; }